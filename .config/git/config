[column]
	ui = auto
[branch]
	sort = -committerdate
[tag]
	sort = version:refname
[diff]
	algorithm = histogram
	colorMoved = plain
	mnemonicPrefix = true
	renames = true
[help]
	autocorrect = prompt
[rerere]
	enabled = true
	autoupdate = true
[rebase]
	autoSquash = true
	autoStash = true
[init]
	defaultbranch = main
[user]
	name = Pranjal Soni
	email = soni.pranjals17@gmail.com
[core]
	excludesfile = ~/.config/git/ignore
	autocrlf = input
	editor = nvim
[alias]
	s = status
	su = status -u
	c = commit
	b = branch
	r = restore
	ca = commit -a
	cm = commit --amend
	cam = commit -a --amend
	lo = log --oneline
	ll = log --pretty=format:'%C(auto)%h%d%Creset %s %C(auto,cyan)@%cr/@ar%Creset %C(auto,italic green)<%an, %ae>%Creset'
	gr = log --graph --all --decorate --oneline
	# Ref: https://stackoverflow.com/questions/14243380/
	gf = log --graph --all --pretty=format:'%C(auto)%h%d%Creset %s %C(auto,cyan)(%cr)%Creset %C(auto,italic green)<%an, %ae>%Creset'
	ch = checkout
	chb = checkout -b
	curb = rev-parse --abbrev-ref HEAD

	# Create a patch file containing all of the commits in a revision range in
	# one file. Without the `--stdout` option, `format-patch` creates a patch
	# file for each commit.
	#
	# *Caveat*: can only pass the second argument branch/tag/something that git
	# recognises. Random strings error with "unknown revision or path not in
	# the working tree".
	#
	# @params
	# $1: git revision range, $2: patch file name
	patch = !git format-patch \"$1\" --stdout > \"$2\".patch

	# Filter specific dirty files and restore those files.
	#
	# NOTE: without wrapping the alias in quotes and appending the '#', git
	# would expand the alias and append the param to the end. Eg. for alias
	#
	#	$ git config --global alias.a "git s -s | rg $1"
	#	$ git a '__snapshots__' # is equivalent to below line
	#	$ git s -s | rg __snapshots__ __snapshots__ # expands to this
	#
	# @params
	# $1: ripgrep pattern to filter the files by
	rpat = "!git s -s | awk '{print $2}' | rg $1 | xargs git r #"

	pog = "!git push -u origin $(git curb)"

	update = "!git pull origin $(git curb)"
[commit]
	# show equivalent to `diff --cached` in the commit message
	verbose = true
[advice]
	detachedHead = false
[credential]
	credentialStore = secretservice
	helper = /home/ps/.dotnet/tools/git-credential-manager
	# helper = osxkeychain
	# helper = libsecret
	# helper = oauth
[credential "https://dev.azure.com"]
	useHttpPath = true

# vim: set noet:
